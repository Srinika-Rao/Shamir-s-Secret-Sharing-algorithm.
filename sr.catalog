const jsonString = `
{
    "keys": {
        "n": 9,
        "k": 6
    },
    "1": {
        "base": "10",
        "value": "28735619723837"
    },
    "2": {
        "base": "16",
        "value": "1A228867F0CA"
    },
    "3": {
        "base": "12",
        "value": "32811A4AA0B7B"
    },
    "4": {
        "base": "11",
        "value": "917978721331A"
    },
    "5": {
        "base": "16",
        "value": "1A22886782E1"
    },
    "6": {
        "base": "10",
        "value": "28735619654702"
    },
    "7": {
        "base": "14",
        "value": "71AB5070CC4B"
    },
    "8": {
        "base": "9",
        "value": "122662581541670"
    },
    "9": {
        "base": "8",
        "value": "642121030037605"
    }
}`;

function convertToDecimal(base, value) {
  return parseInt(value, parseInt(base));
}

function main() {
  const data = JSON.parse(jsonString);
  const n = data.keys.n; // number of roots
  const k = data.keys.k; // min roots required
  const roots = [];

  for (let key in data) {
    if (key !== "keys") {
      const base = data[key].base;
      const value = data[key].value;
      const decimalValue = convertToDecimal(base, value);
      roots.push([parseInt(key), decimalValue]); // x is the key, y is the decimal value
    }
  }

  if (roots.length < k) {
    throw new Error("Not enough roots provided.");
  }

  // Now we can use the roots to determine the coefficients
  // Here we assume a linear polynomial for simplicity (degree 1)
  const lastTerm = roots[0][1]; // Just as a simple case, using one root to find c

  console.log(`The constant term c (using first root) is: ${lastTerm}`);
}

main();
